<?php
  /**
   * @file
   * This file controls the display of the pippa
   * statistics. More precisely, it allows those with
   * the appropriate permissions to view the paths that
   * users have taken through the pippa stories.
   *
   * A page is created that lists all of the tracked
   * users who have started a pippa story.
   * When a viewer clicks on one of the users,
   * this module returns a page showing that 
   * users path through the stories he's visited.
   *
   */


//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////





//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
// Hooks:
/*Hooks are the functions that Drupal
 *uses to allow modules to interact with
 *the Drupal core
 */

  // Implements hook_menu().
  // This is the address for allowing the authors to
  // see the progress of the readers in the story.
function pippa_stats_menu(){
  $items['admin/pippa/statistics'] = array(
				    'page callback' => '_pippa_get_stats',
				    'access arguments' => array('pippa: access statistics'),
				    'title' => 'Narrative statistics',
				    'page arguments' => array(3),
				    );
  return $items;
}

  // Implements hook_permission
  // This hook tells Drupal about the permissions
  // that this module defines.
function pippa_stats_permission(){
  return array(
	       'pippa: access statistics' => array(
	            'title' => t('pippa: access statistics'),
		    'descriptions' => t('Access user statistics related to the pippa module.'),
							));
}




//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////





//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

  //This function returns a table listing users and their progress through the pippa module.
function _pippa_get_stats($uid = NULL) {
  if($uid == NULL){
    //We didn't get a user id, so just list the users.
    return _pippa_list_users();
  }
  else{
    // We have a user id. Show the user's path.
    return _pippa_display_user_path($uid);
  }
}


function _pippa_list_users(){
  $record = db_query('SELECT DISTINCT u.uid, u.name, n.title
  FROM {pippa} tp, {node} n, {users} u
  WHERE tp.uid = u.uid AND n.nid = tp.start_nid
  ORDER BY u.uid')->fetchAll();

  //Set up the table header
  $table_header = array(
			'user' => array('data' => t('User'), 'field' => 'user'),
			'narrative' => array('data' => t('Narrative')),
			);
  
  //Set up the table rows
  $table_rows = array();

  
  foreach ($record as $row) {
    //Finally, push to the $table rows array ...
    $table_rows[] = array(
			  'name' => l($row->name, 'admin/pippa/statistics/' . $row->uid),
			  'node' => $row->title,
			  );
  }

  //... and return a themed table.
  return t('Select a user to see the path (s)he has chosen.') . theme('table', array(
			      'header' => $table_header,
			      'rows' => $table_rows,
			      'id' => 'table-articles',
			      'class' => 'articles',
			      ));

}


function _pippa_display_user_path($uid){  
  // Does this user exist?
  $u = user_load($uid);

  // Couldn't find a user with this $uid
  if(!isset($u) || !$u){
    return t('Sorry, the user with id @uid does not exist.', array('@uid' => $uid));
  }

  // Grab the pippa records that have been generated by this user
  // We'll grab:
  // start.title        | choice.title                      | tp.datetime
  // title of the story | name of the page the user visited | time of the visit
  $record = db_query('SELECT choice.title, start.title AS start_title, tp.datetime
                      FROM {pippa} tp, {users} u, {node} choice, {node} start
                      WHERE tp.uid = u.uid AND u.uid = :uid 
                            AND choice.nid = tp.nid 
                            AND start.nid = tp.start_nid
		      ORDER BY start.title, tp.datetime', array(':uid'=>$uid)
		     )->fetchAll();

  // Couldn't find a record for this user.
  // He is either untracked, or has not started
  // a narrative.
  if(!isset($record) || !$record){
    if(isset($u->name)){
      // We've got a name. Use is.
      return t('Sorry, there are no records for @username.', array('@username' => $u->name));
    }else{
      // We don't have a name, so use the uid.
      return t('Sorry, there are no records for the user with id @uid.', array('@username' => $uid));
    }
  }


  // Set up the table header
  $table_header = array(
			'narrative' => array('data' => t('Narrative')),
			'node' => array('data' => t('Node')),
			'time' => array('data' => t('Time')),
			);

  // Set up the table rows
  $table_rows = array();


  foreach ($record as $row) {
    //Finally, push to the $table rows array ...    
    $table_rows[] = array(
			  'narrative' => $row->start_title,
			  'node' => $row->title,
			  'time' => format_date($row->datetime, 'long'),
			  );
  }

  //... and return a themed table.
  return t('Statistics for user @name', array("@name" => $u->name)) .theme('table', array(
			      'header' => $table_header,
			      'rows' => $table_rows,
			      'id' => 'table-articles',
			      'class' => 'articles',
			      ));


}
